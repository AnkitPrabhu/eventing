// Code generated by go-bindata.
// sources:
// staticx/index.html
// staticx/partials/index/start.html
// DO NOT EDIT!

package cluster

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticxIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x4d\x8f\xe4\x34\x10\xbd\xef\xaf\xf0\x9a\xb3\x63\x86\x45\x08\xa1\x74\x24\x58\x90\x40\xe2\xeb\xc0\x85\x63\xc5\xae\x4e\x6a\xd6\xb1\x8d\xed\x64\x66\xf8\xf5\xc8\x49\x67\x26\x49\xd3\x43\xba\xd1\xf4\xc5\x5f\xef\xd5\x2b\x57\xb5\x5d\x4e\xf9\xfe\xfb\xdf\x3e\xfe\xf1\xe7\xef\x3f\xb0\x36\x75\xa6\x7a\x57\xe6\x86\x19\xb0\xcd\x81\xa3\xe5\x79\x02\x41\x57\xef\x18\x2b\x3b\x4c\xc0\x54\x0b\x21\x62\x3a\xf0\x3e\x1d\xc5\xd7\x7c\x5c\xa8\x21\x22\x6b\x03\x1e\x0f\x5c\xf2\xea\x5d\x9e\x4a\x94\x0c\x56\xaa\xee\x28\x04\x17\x4a\x39\x8d\xc7\xa5\xf7\x42\xb0\xef\x9c\x4b\x31\x05\xf0\x4c\x88\xd1\x84\x21\xfb\x69\x36\x11\x13\x24\x52\x52\xc5\x28\x7d\xa0\xd8\x15\x2a\x46\xce\x02\x9a\x03\x8f\xe9\xc9\x60\x6c\x11\x13\x97\x93\xb5\x0b\x44\xf0\xfe\x22\xed\x32\xab\x9e\xdd\xba\x81\xab\x21\xb6\xb5\x83\xa0\x6f\xe0\x06\x52\x9f\x62\x0b\x0f\x45\x47\xf6\xbf\x77\x3b\xad\xb5\x2e\x24\xd5\x27\x46\xca\x59\xbe\xb1\x79\x84\x21\x4f\x17\xa4\x5c\x66\x96\x72\xca\x61\x59\x3b\xfd\xc4\x6c\x23\xc0\xfb\x03\x57\x75\x93\xbe\xf5\x7e\x4a\xa1\xa6\x81\x29\x03\x31\x1e\xb8\x72\x36\x01\x59\x0c\xe3\xca\x7a\xcd\xc2\x50\x43\x60\x53\x23\xc8\x0e\x18\x22\xce\xc3\x23\x3d\xa2\x16\xc9\x79\xce\x82\x33\x38\xa2\xa9\x81\x44\xce\x9e\x4c\xbd\x2e\xf4\xef\x62\x22\xfb\xbe\xc2\x30\x56\xc2\x8c\x71\x03\x06\xd2\x28\xea\x00\x56\xf3\xc5\x9f\x90\x2d\x7e\x25\x75\xcd\x4c\x30\xae\x71\x9c\xc5\xa0\x5e\xa2\x45\x5d\x23\x55\x5d\x78\xdb\x4c\x59\x7a\xa6\x49\x58\x38\x26\x35\x0d\x8b\x61\x6f\x16\x6e\xce\x11\xb0\x30\xac\xfd\x34\x54\x95\x30\x7b\x45\x56\xe3\x23\x46\xc9\xab\x9f\xa6\x5e\x16\x28\xa5\xa1\xa5\x4a\x6f\xfe\x9f\x88\x75\x7a\x94\xf8\x35\xb7\x6f\x21\xd0\x39\x4b\xc9\x05\xc9\xab\x5f\xa6\xde\x9b\x88\x80\x85\x06\xb3\xc6\xd8\x79\x0b\x09\xe3\x9a\x1c\xa7\x9f\x5d\x73\x7b\x98\xe6\x6e\xa0\xa6\x4d\x5b\xad\x99\xa2\x83\xf3\xda\x3d\xd8\xed\x9f\x12\xb6\x00\x91\x5c\xd3\x18\xe4\x4c\x43\x82\xd3\x60\x41\x5f\xb1\x19\x3b\xed\xe3\xb3\xf9\xb0\xd5\x7d\x4a\xf9\x26\x80\x40\x20\xf0\xd1\x83\xd5\xa8\x0f\xfc\x08\x26\xe2\x46\x9a\x31\xf6\x23\x1a\xcf\xca\xe8\xc1\x3e\x9f\x46\x08\x98\x78\x55\xca\x3c\xb9\x71\x75\x79\x10\x36\x01\x79\x76\xbe\x43\xdb\xcf\xbe\x8c\xfd\xad\xe6\x2a\xfc\x6d\x4a\xfe\x1b\x29\x8f\x2e\xf4\x5d\x2c\x94\xeb\x55\x9b\xab\x48\xa1\x5c\xb7\x3d\xbd\xcf\xbf\x8f\x33\x8a\x29\xd7\x75\xbd\xa5\xf4\xc4\x26\x03\x67\x0e\x66\x9f\x97\xf9\x3c\xcf\xe9\x16\xb1\x5c\x5d\x9c\xf5\x53\xf7\xec\x22\x0c\xee\xe1\xc2\x9d\x66\x44\xec\xc4\xdd\xe7\xec\xd4\x73\xc7\x63\xc4\x24\xee\x58\x07\x64\xb7\x17\x9d\x6d\xc4\x40\xf8\x50\xad\x2e\x97\x73\xf5\xa5\x1b\x65\x54\x81\x7c\x5a\xdf\x60\x86\x6a\x79\xff\x57\x8f\xe1\xe9\xd4\x88\x2f\x8a\xbb\xe2\xae\xb8\x8f\x63\x42\x47\x46\xb5\x9f\xdc\xd3\x58\x88\x76\xb3\xf5\x87\x62\xf8\xb0\x1f\xbe\xaa\x76\xbb\x59\x6d\xdf\x81\xa5\xbf\xf1\x3a\xd6\x73\x45\x5f\xd4\xf6\xdd\x64\xb0\x4d\x6f\x20\xcc\xed\xd5\x44\xf1\xa2\xde\xd3\xcb\xe0\xba\x1d\xbc\x6e\x4b\x24\x6f\xe2\x6d\x06\x83\xeb\x13\xae\x47\xb7\x19\xea\x49\xa4\x80\x28\x35\xc5\xb4\x9d\xbc\xce\xe2\x7d\x74\xd6\x3b\xb2\x09\xaf\x08\xf6\xf4\x46\x5c\xc3\x2f\xe1\xef\xa3\xc4\x47\x3f\xec\xcd\xe5\x7d\x9c\x8a\xf6\x6e\x74\xae\xbe\xbb\xc1\xa7\x4a\xba\x1f\x3f\xd6\xc2\xdd\xf0\x5c\xe0\x76\x83\xc7\x83\xbf\x1b\x5d\x7f\xf5\xe5\xfe\x80\x1f\xc9\x24\x0c\xfb\x5d\x89\x18\x06\x52\xb8\x9f\xa0\x29\xa0\x4a\x34\x9c\x51\x5e\xe1\xe4\xef\x83\xbd\xf6\xf3\x3b\x35\x38\x63\xce\x37\x51\xca\xfc\xa2\x1e\x1f\xd8\xe3\xc7\xd3\x3f\x01\x00\x00\xff\xff\xfc\x92\x12\x17\x4d\x0d\x00\x00")

func staticxIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticxIndexHtml,
		"staticx/index.html",
	)
}

func staticxIndexHtml() (*asset, error) {
	bytes, err := staticxIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "staticx/index.html", size: 3405, mode: os.FileMode(420), modTime: time.Unix(1480517960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticxPartialsIndexStartHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x31\x4f\xc3\x30\x10\x85\x77\xff\x8a\xa7\x4e\x20\xd1\x86\x30\x82\xc9\x02\x0b\x0b\xea\xc6\xec\xd8\x17\x7c\x92\x93\x43\xf6\xa5\x6d\x84\xf8\xef\xc8\x28\x91\xe8\x74\xba\xef\xe9\x3e\xdd\xb3\x81\x4f\xf0\xc9\x95\xf2\xbc\xe3\x29\xd0\xe5\x83\x92\x97\x91\x76\x9d\x01\x6c\x6c\xbb\x75\x87\x0a\x7c\x3f\x72\xce\x92\x6d\x13\xdb\xbf\x38\xf0\xa9\xdb\x20\xb8\xc0\xe1\xf5\xe5\xb8\xef\x5d\xa1\x80\x95\xca\x00\x07\x2f\xb3\x8f\x15\xc3\xa7\xb9\x28\xe5\x83\x6d\xea\xed\xe6\x38\x26\xaa\x61\xa0\x81\x27\xc2\x22\x73\xc6\xc0\xb9\xe8\x26\xb9\xa9\xfa\xfa\xdc\x2d\xce\xac\x11\x1a\x09\xef\x74\xc6\x5b\x65\xe8\x67\x55\x99\x36\xe5\x3a\x8c\x2d\xba\x24\xea\xcc\xe1\x7f\x2b\xc4\xf6\x0e\xd7\xa4\xf6\xff\x36\xc0\xe8\xf2\x27\x4f\xfb\x5e\x54\x65\x7c\xc4\xc3\xfd\xd7\xe5\xc9\xfc\x18\xdb\xac\x9e\xdf\x00\x00\x00\xff\xff\xf8\x3e\xd5\x4d\x29\x01\x00\x00")

func staticxPartialsIndexStartHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticxPartialsIndexStartHtml,
		"staticx/partials/index/start.html",
	)
}

func staticxPartialsIndexStartHtml() (*asset, error) {
	bytes, err := staticxPartialsIndexStartHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "staticx/partials/index/start.html", size: 297, mode: os.FileMode(420), modTime: time.Unix(1480517960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"staticx/index.html":                staticxIndexHtml,
	"staticx/partials/index/start.html": staticxPartialsIndexStartHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"staticx": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticxIndexHtml, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"index": &bintree{nil, map[string]*bintree{
				"start.html": &bintree{staticxPartialsIndexStartHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
