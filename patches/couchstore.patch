diff --git a/src/views/mapreduce/mapreduce.cc b/src/views/mapreduce/mapreduce.cc
index aafd74a..944d4c9 100644
--- a/src/views/mapreduce/mapreduce.cc
+++ b/src/views/mapreduce/mapreduce.cc
@@ -23,7 +23,7 @@
 #include <platform/cb_malloc.h>
 #include <stdlib.h>
 // This is libv8_libplatform library which handles garbage collection for v8
-#include <include/libplatform/libplatform.h>
+#include <libplatform/libplatform.h>
 
 using namespace v8;
 
@@ -176,7 +176,6 @@ void destroyContext(mapreduce_ctx_t *ctx)
     }
 
     ctx->isolate->Dispose();
-    delete ctx->bufAllocator;
 
 }
 
@@ -195,9 +194,9 @@ static Local<String> createUtf8String(Isolate *isolate, const char *str,
 
 static void doInitContext(mapreduce_ctx_t *ctx)
 {
-    ctx->bufAllocator = new ArrayBufferAllocator();
     Isolate::CreateParams createParams;
-    createParams.array_buffer_allocator = ctx->bufAllocator;
+    createParams.array_buffer_allocator =
+      ArrayBuffer::Allocator::NewDefaultAllocator();
     ctx->isolate = Isolate::New(createParams);
     Locker locker(ctx->isolate);
     Isolate::Scope isolate_scope(ctx->isolate);
diff --git a/src/views/mapreduce/mapreduce_internal.h b/src/views/mapreduce/mapreduce_internal.h
index d476c0d..5cbc35f 100644
--- a/src/views/mapreduce/mapreduce_internal.h
+++ b/src/views/mapreduce/mapreduce_internal.h
@@ -35,7 +35,7 @@
 #include <string.h>
 #include <time.h>
 #include <vector>
-#include <include/v8.h>
+#include <v8.h>
 
 
 class MapReduceError;
@@ -44,26 +44,9 @@ typedef std::list<mapreduce_json_t>                    json_results_list_t;
 typedef std::list<mapreduce_kv_t>                      kv_list_int_t;
 typedef std::vector< v8::Persistent<v8::Function>* >   function_vector_t;
 
-class ArrayBufferAllocator : public v8::ArrayBuffer::Allocator {
-public:
-    virtual void* Allocate(size_t length) {
-        void* data = AllocateUninitialized(length);
-        return data == NULL ? data : memset(data, 0, length);
-    }
-
-    virtual void* AllocateUninitialized(size_t length) {
-        return cb_malloc(length);
-    }
-
-    virtual void Free(void* data, size_t) {
-        cb_free(data);
-    }
-};
-
 typedef struct {
     v8::Persistent<v8::Context> jsContext;
     v8::Isolate                 *isolate;
-    ArrayBufferAllocator        *bufAllocator;
     function_vector_t           *functions;
     kv_list_int_t               *kvs;
     std::atomic<time_t>         taskStartTime;
