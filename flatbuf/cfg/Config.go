// automatically generated by the FlatBuffers compiler, do not modify

package cfg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Config struct {
	_tab flatbuffers.Table
}

func GetRootAsConfig(buf []byte, offset flatbuffers.UOffsetT) *Config {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Config{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Config) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Config) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Config) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Config) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Config) AppCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Config) AppName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Config) DepCfg(obj *DepCfg) *DepCfg {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DepCfg)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ConfigAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func ConfigAddAppCode(builder *flatbuffers.Builder, appCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(appCode), 0)
}
func ConfigAddAppName(builder *flatbuffers.Builder, appName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(appName), 0)
}
func ConfigAddDepCfg(builder *flatbuffers.Builder, depCfg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(depCfg), 0)
}
func ConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
