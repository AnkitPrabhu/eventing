namespace flatbuf.payload;

table VbsThreadMap {
  threadID:short;
  partitions:[short];
}

table Payload {

  // Handler config
  app_name:string;
  curl_timeout:long;
  depcfg:string;
  enable_recursive_mutation:bool;
  enable_v8_debugger:bool;
  execution_timeout:int; // Execution timeout for handler code execution
  lcb_inst_capacity:int; // Nested iterator related fields
  checkpoint_interval:int; // Controls how frequently checkpoint will be updated in metadata bucket
  skip_lcb_bootstrap:bool; // Control bootstrap of lcb handles.
                           // In some case we need to skip lcb connects i.e. while checking for
                           // compilation issues in supplied handler code.

  // Server settings
  curr_host:string;
  curr_eventing_port:string;
  eventing_dir:string;
  kv_host_port:string;
  rbac_pass:string;
  rbac_user:string;

  // DCP event related fields
  key:string; // dcp mutation key
  value:string; // dcp mutation value

  // Timer event related fields
  callback_fn:string; // timer event callback function
  doc_id:string; // timer event doc_id
  doc_ids_callback_fns:string; // non doc-id based timer event doc_id-callback_fn pairs

  // CPP worker config
  partitionCount:short; // Virtual partitions for sharding workload among c++ workers
  thr_map: [VbsThreadMap]; // Mapping of vbuckets to std::thread associated with V8Worker instance;

}

root_type Payload;
