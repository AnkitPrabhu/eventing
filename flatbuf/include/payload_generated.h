// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PAYLOAD_FLATBUF_PAYLOAD_H_
#define FLATBUFFERS_GENERATED_PAYLOAD_FLATBUF_PAYLOAD_H_

#include "flatbuffers/flatbuffers.h"

namespace flatbuf {
namespace payload {

struct Payload;

enum Version {
  Version_Spock = 0,
  Version_MIN = Version_Spock,
  Version_MAX = Version_Spock
};

inline const char **EnumNamesVersion() {
  static const char *names[] = { "Spock", nullptr };
  return names;
}

inline const char *EnumNameVersion(Version e) { return EnumNamesVersion()[static_cast<int>(e)]; }

struct Payload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VERSION = 4,
    VT_KEY = 6,
    VT_VALUE = 8
  };
  Version version() const { return static_cast<Version>(GetField<int8_t>(VT_VERSION, 0)); }
  const flatbuffers::String *key() const { return GetPointer<const flatbuffers::String *>(VT_KEY); }
  const flatbuffers::String *value() const { return GetPointer<const flatbuffers::String *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_VERSION) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_KEY) &&
           verifier.Verify(key()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct PayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(Version version) { fbb_.AddElement<int8_t>(Payload::VT_VERSION, static_cast<int8_t>(version), 0); }
  void add_key(flatbuffers::Offset<flatbuffers::String> key) { fbb_.AddOffset(Payload::VT_KEY, key); }
  void add_value(flatbuffers::Offset<flatbuffers::String> value) { fbb_.AddOffset(Payload::VT_VALUE, value); }
  PayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PayloadBuilder &operator=(const PayloadBuilder &);
  flatbuffers::Offset<Payload> Finish() {
    auto o = flatbuffers::Offset<Payload>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Payload> CreatePayload(flatbuffers::FlatBufferBuilder &_fbb,
    Version version = Version_Spock,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  PayloadBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<Payload> CreatePayloadDirect(flatbuffers::FlatBufferBuilder &_fbb,
    Version version = Version_Spock,
    const char *key = nullptr,
    const char *value = nullptr) {
  return CreatePayload(_fbb, version, key ? _fbb.CreateString(key) : 0, value ? _fbb.CreateString(value) : 0);
}

inline const flatbuf::payload::Payload *GetPayload(const void *buf) { return flatbuffers::GetRoot<flatbuf::payload::Payload>(buf); }

inline bool VerifyPayloadBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<flatbuf::payload::Payload>(nullptr); }

inline void FinishPayloadBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<flatbuf::payload::Payload> root) { fbb.Finish(root); }

}  // namespace payload
}  // namespace flatbuf

#endif  // FLATBUFFERS_GENERATED_PAYLOAD_FLATBUF_PAYLOAD_H_
