// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_V8INIT_FLATBUF_V8INIT_H_
#define FLATBUFFERS_GENERATED_V8INIT_FLATBUF_V8INIT_H_

#include "flatbuffers/flatbuffers.h"

namespace flatbuf {
namespace v8init {

struct Init;

struct Init FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_APPNAME = 4,
    VT_KVHOSTPORT = 6,
    VT_DEPCFG = 8
  };
  const flatbuffers::String *appname() const {
    return GetPointer<const flatbuffers::String *>(VT_APPNAME);
  }
  const flatbuffers::String *kvhostport() const {
    return GetPointer<const flatbuffers::String *>(VT_KVHOSTPORT);
  }
  const flatbuffers::String *depcfg() const {
    return GetPointer<const flatbuffers::String *>(VT_DEPCFG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_APPNAME) &&
           verifier.Verify(appname()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_KVHOSTPORT) &&
           verifier.Verify(kvhostport()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DEPCFG) &&
           verifier.Verify(depcfg()) &&
           verifier.EndTable();
  }
};

struct InitBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_appname(flatbuffers::Offset<flatbuffers::String> appname) {
    fbb_.AddOffset(Init::VT_APPNAME, appname);
  }
  void add_kvhostport(flatbuffers::Offset<flatbuffers::String> kvhostport) {
    fbb_.AddOffset(Init::VT_KVHOSTPORT, kvhostport);
  }
  void add_depcfg(flatbuffers::Offset<flatbuffers::String> depcfg) {
    fbb_.AddOffset(Init::VT_DEPCFG, depcfg);
  }
  InitBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InitBuilder &operator=(const InitBuilder &);
  flatbuffers::Offset<Init> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Init>(end);
    return o;
  }
};

inline flatbuffers::Offset<Init> CreateInit(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> appname = 0,
    flatbuffers::Offset<flatbuffers::String> kvhostport = 0,
    flatbuffers::Offset<flatbuffers::String> depcfg = 0) {
  InitBuilder builder_(_fbb);
  builder_.add_depcfg(depcfg);
  builder_.add_kvhostport(kvhostport);
  builder_.add_appname(appname);
  return builder_.Finish();
}

inline flatbuffers::Offset<Init> CreateInitDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *appname = nullptr,
    const char *kvhostport = nullptr,
    const char *depcfg = nullptr) {
  return CreateInit(
      _fbb,
      appname ? _fbb.CreateString(appname) : 0,
      kvhostport ? _fbb.CreateString(kvhostport) : 0,
      depcfg ? _fbb.CreateString(depcfg) : 0);
}

inline const flatbuf::v8init::Init *GetInit(const void *buf) {
  return flatbuffers::GetRoot<flatbuf::v8init::Init>(buf);
}

inline bool VerifyInitBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuf::v8init::Init>(nullptr);
}

inline void FinishInitBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flatbuf::v8init::Init> root) {
  fbb.Finish(root);
}

}  // namespace v8init
}  // namespace flatbuf

#endif  // FLATBUFFERS_GENERATED_V8INIT_FLATBUF_V8INIT_H_
