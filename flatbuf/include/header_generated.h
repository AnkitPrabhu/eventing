// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_HEADER_FBUF_HEADER_H_
#define FLATBUFFERS_GENERATED_HEADER_FBUF_HEADER_H_

#include "flatbuffers/flatbuffers.h"

namespace fbuf {
namespace header {

struct Header;

struct Header FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENT = 4,
    VT_OPCODE = 6,
    VT_METADATA = 8
  };
  int8_t event() const { return GetField<int8_t>(VT_EVENT, 0); }
  int8_t opcode() const { return GetField<int8_t>(VT_OPCODE, 0); }
  const flatbuffers::String *metadata() const { return GetPointer<const flatbuffers::String *>(VT_METADATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_EVENT) &&
           VerifyField<int8_t>(verifier, VT_OPCODE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_METADATA) &&
           verifier.Verify(metadata()) &&
           verifier.EndTable();
  }
};

struct HeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_event(int8_t event) { fbb_.AddElement<int8_t>(Header::VT_EVENT, event, 0); }
  void add_opcode(int8_t opcode) { fbb_.AddElement<int8_t>(Header::VT_OPCODE, opcode, 0); }
  void add_metadata(flatbuffers::Offset<flatbuffers::String> metadata) { fbb_.AddOffset(Header::VT_METADATA, metadata); }
  HeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  HeaderBuilder &operator=(const HeaderBuilder &);
  flatbuffers::Offset<Header> Finish() {
    auto o = flatbuffers::Offset<Header>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Header> CreateHeader(flatbuffers::FlatBufferBuilder &_fbb,
    int8_t event = 0,
    int8_t opcode = 0,
    flatbuffers::Offset<flatbuffers::String> metadata = 0) {
  HeaderBuilder builder_(_fbb);
  builder_.add_metadata(metadata);
  builder_.add_opcode(opcode);
  builder_.add_event(event);
  return builder_.Finish();
}

inline flatbuffers::Offset<Header> CreateHeaderDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int8_t event = 0,
    int8_t opcode = 0,
    const char *metadata = nullptr) {
  return CreateHeader(_fbb, event, opcode, metadata ? _fbb.CreateString(metadata) : 0);
}

inline const fbuf::header::Header *GetHeader(const void *buf) { return flatbuffers::GetRoot<fbuf::header::Header>(buf); }

inline bool VerifyHeaderBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbuf::header::Header>(nullptr); }

inline void FinishHeaderBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbuf::header::Header> root) { fbb.Finish(root); }

}  // namespace header
}  // namespace fbuf

#endif  // FLATBUFFERS_GENERATED_HEADER_FBUF_HEADER_H_
