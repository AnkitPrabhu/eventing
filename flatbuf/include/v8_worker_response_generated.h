// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_V8WORKERRESPONSE_FLATBUF_WORKER_RESPONSE_H_
#define FLATBUFFERS_GENERATED_V8WORKERRESPONSE_FLATBUF_WORKER_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"

namespace flatbuf {
namespace worker_response {

struct Message;

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MSG = 4,
    VT_LOGENTRY = 6
  };
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  const flatbuffers::String *logEntry() const {
    return GetPointer<const flatbuffers::String *>(VT_LOGENTRY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MSG) &&
           verifier.Verify(msg()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_LOGENTRY) &&
           verifier.Verify(logEntry()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(Message::VT_MSG, msg);
  }
  void add_logEntry(flatbuffers::Offset<flatbuffers::String> logEntry) {
    fbb_.AddOffset(Message::VT_LOGENTRY, logEntry);
  }
  MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> msg = 0,
    flatbuffers::Offset<flatbuffers::String> logEntry = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_logEntry(logEntry);
  builder_.add_msg(msg);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *msg = nullptr,
    const char *logEntry = nullptr) {
  return CreateMessage(
      _fbb,
      msg ? _fbb.CreateString(msg) : 0,
      logEntry ? _fbb.CreateString(logEntry) : 0);
}

inline const flatbuf::worker_response::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<flatbuf::worker_response::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuf::worker_response::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flatbuf::worker_response::Message> root) {
  fbb.Finish(root);
}

}  // namespace worker_response
}  // namespace flatbuf

#endif  // FLATBUFFERS_GENERATED_V8WORKERRESPONSE_FLATBUF_WORKER_RESPONSE_H_
